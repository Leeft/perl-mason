
=head1 NAME

Mason::Manual::Parameters - Parameters that can be passed to the Mason
constructor

=head1 PARAMETERS

=for html <a name="allow_globals" />

=over

=item allow_globals (varnames)

List of one or more global variable names that will be available in all
components, like C<< $m >> is by default.

    allow_globals => [qw($dbh)]

As in any programming environment, globals should be created sparingly (if at
all) and only when other mechanisms (parameter passing, attributes, singletons)
will not suffice. L<Catalyst::View::Mason2|Catalyst::View::Mason2>, for
example, creates a C<< $c >> global set to the context object in each request.

Set the values of globals with L<set_global|/set_global>.

=for html <a name="autobase_names" />

=item autobase_names

Array reference of L<autobase|Mason::Manual/Autobase components> filenames to
check in order when determining a component's superclass. Default is C<<
["Base.pm", "Base.m"] >>.

=for html <a name="autoextend_request_path" />

=item autoextend_request_path

Array reference of extensions to automatically add to the request path when
searching for a matching page component. Defaults to [".pm", ".m"]. An empty
list, or a false value, means do no autoextending.

=for html <a name="comp_root" />

=item comp_root

Required. The component root marks the top of your component hierarchy and
defines how component paths are translated into real file paths. For example,
if your component root is F</usr/local/httpd/docs>, a component path of
F</products/sales.m> translates to the file
F</usr/local/httpd/docs/products/sales.m>.

This parameter may be either a single path or an array reference of paths. If
it is an array reference, the paths will be searched in the provided order
whenever a component path is resolved, much like Perl's C<< @INC >>.

=for html <a name="component_class_prefix" />

=item component_class_prefix

Prefix to use in generated component classnames. Defaults to 'MC' plus the
interpreter's count, e.g. MC0. So a component '/foo/bar' would get a classname
like 'MC0::foo::bar'.

=for html <a name="data_dir" />

=item data_dir

The data directory is a writable directory that Mason uses for various features
and optimizations: for example, component object files and data cache files.
Mason will create the directory on startup if necessary.

Defaults to a temporary directory that will be cleaned up at process end. This
will hurt performance as Mason will have to recompile components on each run.

=for html <a name="dhandler_names" />

=item dhandler_names

Array reference of dhandler file names to check in order when resolving a
top-level path. Default is C<< ["dhandler.pm", "dhandler.m"] >>. An empty list
disables this feature.

=for html <a name="index_names" />

=item index_names

Array reference of index file names to check in order when resolving a
top-level path. Default is C<< ["index.pm", "index.m"] >>. An empty list
disables this feature.

=for html <a name="no_source_line_numbers" />

=item no_source_line_numbers

Do not put in source line number comments when generating code.  Setting this
to true will cause error line numbers to reflect the real object file, rather
than the source component.

=for html <a name="object_file_extension" />

=item object_file_extension

Extension to add to the end of object files. Default is ".mobj".

=for html <a name="plugins" />

=item plugins

A list of plugins and/or plugin bundles:

    plugins => [
      'OnePlugin', 
      'AnotherPlugin',
      '+My::Mason::Plugin::AThirdPlugin',
      '@APluginBundle',
      '-DontLikeThisPlugin',
    ]);

See L<Mason::Manual::Plugins>.

=for html <a name="out_method" />

=item out_method

Default L<out_method|Request/out_method> passed to each new request.

=for html <a name="pure_perl_extensions" />

=item pure_perl_extensions

A listref of file extensions of components to be considered as pure perl (see
L<Pure Perl Components|Mason::Manual::Syntax/Pure_Perl_Components>). Default is
C<< ['.pm' >>. If an empty list is specified, then no components will be
considered pure perl.

=for html <a name="static_source" />

=item static_source

True or false, default is false. When false, Mason checks the timestamp of the
component source file each time the component is used to see if it has changed.
This provides the instant feedback for source changes that is expected for
development.  However it does entail a file stat for each component executed.

When true, Mason assumes that the component source tree is unchanging: it will
not check component source files to determine if the memory cache or object
file has expired.  This can save many file stats per request. However, in order
to get Mason to recognize a component source change, you must touch the
L<static_source_touch_file|/static_source_touch_file>.

We recommend turning this mode on in your production sites if possible, if
performance is of any concern.

=for html <a name="static_source_touch_file" />

=item static_source_touch_file

Specifies a filename that Mason will check once at the beginning of every
request when in L<static_source|/static_source> mode. When the file timestamp
changes (indicating that a component has changed), Mason will clear its
in-memory component cache and recheck existing object files.

=for html <a name="top_level_extensions" />

=item top_level_extensions

A listref of file extensions of components to be considered "top level",
accessible directly from C<< $interp->run >> or a web request. Default is C<<
['.pm', '.m'] >>. If an empty list is specified, then there will be I<no>
restriction; that is, I<all> components will be considered top level.

=back

=head1 CUSTOM MASON CLASSES

These parameters specify alternate classes to use instead of the default
Mason:: classes.

For example, to use your own Compilation base class:

    my $interp = Mason->new(base_compilation_class => 'MyApp::Mason::Compilation', ...);

L<Relevant plugins|Mason::Manual::Plugins>, if any, will applied to this class
to create a final class, which you can get with

    $interp->compilation_class

=for html <a name="base_code_cache_class" />

=over

=item base_code_cache_class

Specify alternate to L<Mason::CodeCache|Mason::CodeCache>

=for html <a name="base_compilation_class" />

=item base_compilation_class

Specify alternate to L<Mason::Compilation|Mason::Compilation>

=for html <a name="base_component_class" />

=item base_component_class

Specify alternate to L<Mason::Component|Mason::Component>

=for html <a name="base_component_moose_class" />

=item base_component_moose_class

Specify alternate to L<Mason::Component::Moose|Mason::Component::Moose>

=for html <a name="base_component_class_meta_class" />

=item base_component_class_meta_class

Specify alternate to L<Mason::Component::ClassMeta|Mason::Component::ClassMeta>

=for html <a name="base_component_import_class" />

=item base_component_import_class

Specify alternate to L<Mason::Component::Import|Mason::Component::Import>

=for html <a name="base_request_class" />

=item base_request_class

Specify alternate to L<Mason::Request|Mason::Request>

=for html <a name="base_result_class" />

=item base_result_class

Specify alternate to L<Mason::Result|Mason::Result>

=back
